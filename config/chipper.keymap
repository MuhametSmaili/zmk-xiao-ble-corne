/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define COMBO_TIMEOUT 10
#define COMBO_PRIOR_IDLE 80

// adding double tap for layer tap, which makes possible to hold the $kp

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    flavor = "balanced";
};

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    behaviors {
        weak: weak {
            compatible = "zmk,behavior-hold-tap";
            label = "WEAK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <230>;
        };
    hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
               flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <150>;
                bindings = <&kp>, <&kp>;
                hold-trigger-on-release;   
        };

    hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp DEL>;
            key-positions = <15 16>;
        };

        copy {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
        };

        paste {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
        };

        cut {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
        };

        select-all {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(A)>;
            key-positions = <12 13>;
        };

        scroll-up {
            bindings = <&kp C_AC_SCROLL_UP>;
            key-positions = <7 10>;
        };

        scroll_down {
            bindings = <&kp C_AC_SCROLL_DOWN>;
            key-positions = <31 34>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <37 17>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 16>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <40 18>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&kp TAB             &kp Q             &kp W  &kp E     &kp R        &kp T              &kp Y               &kp U  &kp I      &kp O    &kp P     &kp BSPC
&weak LCTRL ESCAPE  &weak LEFT_GUI A  &kp S  &kp D     &kp F        &kp G              &kp H               &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT           &kp Z             &kp X  &kp C     &kp V        &kp B              &kp N               &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt RSHIFT ENTER
                                             &kp LALT  &lt 2 SPACE  &mt LCTRL ENTER    &mt LEFT_GUI ENTER  &mo 1  &kp LALT
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&kp TAB           &kp N1                    &kp N2   &kp N3        &kp N4          &kp N5       &kp N6              &kp N7       &kp N8     &kp N9     &kp N0            &kp BSPC
&mt LCTRL ESCAPE  &mt LEFT_GUI PRINTSCREEN  &kp F14  &trans        &trans          &trans       &kp LEFT            &kp DOWN     &kp UP     &kp RIGHT  &kp C_PLAY_PAUSE  &kp C_VOLUME_UP
&kp LSHFT         &trans                    &trans   &kp C_NEXT    &kp PAGE_DOWN   &kp END      &kp HOME            &kp PAGE_UP  &kp COMMA  &kp DOT    &kp K_MUTE        &mt LSHFT C_VOL_DN
                                                     &kp LEFT_ALT  &mt LGUI SPACE  &kp LCTRL    &mt LEFT_GUI ENTER  &trans       &kp RALT
            >;
        };

        raise_layer {
            label = "Raise";
            bindings = <
&kp TILDE         &kp EXCL      &kp AT     &kp HASH   &kp DLLR        &kp PRCNT           &kp CARET          &kp AMPS         &kp KP_MULTIPLY  &kp LPAR        &kp RPAR   &kp BSPC
&mt LCTRL ESCAPE  &kp LEFT_GUI  &kp GRAVE  &kp SLASH  &kp LEFT_BRACE  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp BACKSLASH    &kp MINUS       &kp EQUAL  &kp PIPE
&kp LSHFT         &trans        &kp SPACE  &mkp MB5   &mkp MCLK       &mkp LCLK           &mkp RCLK          &mkp MCLK        &mkp MB4         &kp UNDERSCORE  &kp PLUS   &kp RIGHT_SHIFT
                                           &kp LALT   &trans          &mo 3               &mt RGUI ENTER     &kp LCTRL        &kp RALT
            >;
        };

        function_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7                &kp F8  &kp F9  &kp F10       &kp F11       &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_BRIGHTNESS_INC  &trans  &trans  &trans        &trans        &sys_reset
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_BRIGHTNESS_DEC  &trans  &trans  &out OUT_TOG  &out OUT_BLE  &bt BT_CLR_ALL
                                        &trans        &trans        &trans          &trans                &to 0   &trans
            >;
        };
    };
};
