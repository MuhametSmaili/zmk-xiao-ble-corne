/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define COMBO_TIMEOUT 20
#define COMBO_PRIOR_IDLE 80

// adding double tap for layer tap, which makes possible to hold the $kp

&lt {
    tapping-term-ms = <230>;
    quick-tap-ms = <165>;
    flavor = "balanced";
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE SPACE MINUS>; };

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "home-row-mode-for-right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <140>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "home-mode-row-for-left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <140>;
            flavor = "balanced";
            hold-trigger-key-positions = <37 38 36 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rthumb: rthumb {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_THUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <130>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 1 2 3 4 5 18 19 20 21 13 40 30 29>;
        };

        lthumb: lthumb {
            compatible = "zmk,behavior-hold-tap";
            label = "LTHUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <150>;
        };

        holdPriority: holdPriority {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDPRIORITY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <150>;
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp DEL>;
            key-positions = <15 16>;
        };

        copy {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
        };

        paste {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
        };

        cut {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <19 20>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <1 2 3 4>;
            layers = <0 4>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <8 9>;
            slow-release;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
            layers = <0>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19 15 20>;
            layers = <0>;
        };

        num_pad_one_hand {
            bindings = <&tog 4>;
            key-positions = <26 25 27 28>;
            layers = <0 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&trans   &kp Q         &kp W            &kp E                            &kp R              &kp T                      &kp Y                       &kp U                &kp I                         &kp O            &kp P            &trans
&kp ESC  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D                  &hml LEFT_SHIFT F  &kp G                      &kp H                       &hmr LEFT_SHIFT J    &hmr LEFT_GUI K               &hmr LEFT_ALT L  &hmr LCTRL SEMI  &kp SQT
&trans   &kp Z         &kp X            &kp C                            &kp V              &kp B                      &kp N                       &kp M                &kp COMMA                     &kp DOT          &kp FSLH         &trans
                                        &holdPriority LEFT_SHIFT ESCAPE  &lthumb 1 SPACE    &holdPriority LCTRL TAB    &holdPriority LSHIFT ENTER  &rthumb 2 BACKSPACE  &holdPriority LEFT_ALT MINUS
            >;
        };

        symbol_layer {
            label = "Raise";
            bindings = <
&kp TILDE         &kp EXCL         &kp AT                    &kp HASH                      &kp DLLR                      &kp PRCNT    &kp CARET      &kp AMPS              &kp KP_MULTIPLY            &kp LPAR             &kp RPAR          &kp BSPC
&mt LCTRL ESCAPE  &hml LCTRL PIPE  &hml LEFT_ALT UNDERSCORE  &hml LEFT_COMMAND LEFT_BRACE  &hml LEFT_SHIFT LEFT_BRACKET  &kp FSLH     &kp BACKSLASH  &hmr LEFT_SHIFT RBKT  &hmr LEFT_GUI RIGHT_BRACE  &hmr LEFT_ALT MINUS  &hmr LCTRL COLON  &kp DOUBLE_QUOTES
&kp LSHFT         &kp TILDE        &kp EQUAL                 &kp GRAVE                     &kp SINGLE_QUOTE              &kp MINUS    &kp PLUS       &kp DOUBLE_QUOTES     &kp LESS_THAN              &kp GREATER_THAN     &kp QUESTION      &kp RIGHT_SHIFT
                                                             &trans                        &trans                        &mo 3        &trans         &trans                &trans
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&kp TAB           &kp N1                  &kp N2  &kp N3  &kp N4       &kp N5      &kp N6    &kp N7                &kp N8                  &kp N9               &kp N0                   &kp BSPC
&mt LCTRL ESCAPE  &hml LCTRL PRINTSCREEN  &trans  &trans  &trans       &trans      &kp LEFT  &hmr LEFT_SHIFT DOWN  &hmr LEFT_GUI UP_ARROW  &hmr LEFT_ALT RIGHT  &hmr LCTRL C_PLAY_PAUSE  &kp C_VOLUME_UP
&kp LSHFT         &trans                  &trans  &trans  &kp PAGE_UP  &kp HOME    &kp END   &kp PAGE_DOWN         &kp COMMA               &kp DOT              &kp K_MUTE               &mt LSHFT C_VOL_DN
                                                  &trans  &trans       &trans      &trans    &trans                &trans
            >;
        };

        function_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7                &kp F8  &kp F9  &kp F10       &kp F11       &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_BRIGHTNESS_INC  &trans  &trans  &trans        &trans        &sys_reset
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_BRIGHTNESS_DEC  &trans  &trans  &out OUT_TOG  &out OUT_BLE  &bt BT_CLR_ALL
                                        &trans        &trans        &trans          &trans                &to 0   &trans
            >;
        };

        one_hand_numbers {
            bindings = <
&trans  &kp KP_MULTIPLY  &kp N7        &kp NUMBER_8  &kp NUMBER_9  &kp MINUS          &trans  &trans  &trans  &trans  &trans  &trans
&tog 0  &kp COMMA        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp DOT          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_MULTIPLY    &trans  &trans  &trans  &trans  &trans  &trans
                                       &trans        &kp SPACE     &kp NUMBER_0       &tog 0  &trans  &trans
            >;
        };
    };
};
