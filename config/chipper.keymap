/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define COMBO_TIMEOUT 20
#define COMBO_PRIOR_IDLE 80

// adding double tap for layer tap, which makes possible to hold the $kp

&lt {
    tapping-term-ms = <230>;
    quick-tap-ms = <165>;
    flavor = "balanced";
};

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    behaviors {
        weak: weak {
            compatible = "zmk,behavior-hold-tap";
            label = "WEAK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <230>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "home-row-mode-for-right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "home-mode-row-for-left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <37 38 36 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rthumb: rthumb {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_THUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp DEL>;
            key-positions = <15 16>;
        };

        copy {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
        };

        paste {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
        };

        cut {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
        };

        select-all {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(A)>;
            key-positions = <12 13>;
        };

        scroll-up {
            bindings = <&kp C_AC_SCROLL_UP>;
            key-positions = <7 10>;
        };

        scroll_down {
            bindings = <&kp C_AC_SCROLL_DOWN>;
            key-positions = <31 34>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <37 17>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 16>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <40 18>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 40>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <19 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&trans              &kp Q         &kp W            &kp E            &kp R              &kp T            &kp Y             &kp U                &kp I            &kp O            &kp P            &trans
&weak LCTRL ESCAPE  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G            &kp H             &hmr LEFT_SHIFT J    &hmr LEFT_GUI K  &hmr LEFT_ALT L  &hmr LCTRL SEMI  &kp SQT
&trans              &kp Z         &kp X            &kp C            &kp V              &kp B            &kp N             &kp M                &kp COMMA        &kp DOT          &kp FSLH         &trans
                                                   &kp ESC          &lt 2 SPACE        &mt LCTRL TAB    &mt LSHIFT ENTER  &rthumb 1 BACKSPACE  &kp LEFT_ALT
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&kp TAB           &kp N1                  &kp N2        &kp N3            &kp N4          &kp N5      &kp N6    &kp N7                &kp N8                  &kp N9               &kp N0                   &kp BSPC
&mt LCTRL ESCAPE  &hml LCTRL PRINTSCREEN  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &trans      &kp LEFT  &hmr LEFT_SHIFT DOWN  &hmr LEFT_GUI UP_ARROW  &hmr LEFT_ALT RIGHT  &hmr LCTRL C_PLAY_PAUSE  &kp C_VOLUME_UP
&kp LSHFT         &trans                  &trans        &kp C_NEXT        &kp PAGE_DOWN   &kp HOME    &kp END   &kp PAGE_UP           &kp COMMA               &kp DOT              &kp K_MUTE               &mt LSHFT C_VOL_DN
                                                        &trans            &trans          &trans      &trans    &trans                &trans
            >;
        };

        raise_layer {
            label = "Raise";
            bindings = <
&kp TILDE         &kp EXCL   &kp AT               &kp HASH                 &kp DLLR                    &kp PRCNT           &kp CARET          &kp AMPS                     &kp KP_MULTIPLY          &kp LPAR             &kp RPAR          &kp BSPC
&mt LCTRL ESCAPE  &kp LCTRL  &hml LEFT_ALT GRAVE  &hml LEFT_COMMAND SLASH  &hml LEFT_SHIFT LEFT_BRACE  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &hmr LEFT_SHIFT RIGHT_BRACE  &hmr LEFT_GUI BACKSLASH  &hmr LEFT_ALT MINUS  &hmr LCTRL EQUAL  &kp PIPE
&kp LSHFT         &trans     &kp TILDE            &kp UNDER                &kp SINGLE_QUOTE            &kp MINUS           &kp PLUS           &kp DOUBLE_QUOTES            &kp PIPE                 &trans               &trans            &kp RIGHT_SHIFT
                                                  &trans                   &trans                      &mo 3               &trans             &trans                       &trans
            >;
        };

        function_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7                &kp F8  &kp F9  &kp F10       &kp F11       &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_BRIGHTNESS_INC  &trans  &trans  &trans        &trans        &sys_reset
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_BRIGHTNESS_DEC  &trans  &trans  &out OUT_TOG  &out OUT_BLE  &bt BT_CLR_ALL
                                        &trans        &trans        &trans          &trans                &to 0   &trans
            >;
        };
    };
};
